#
# Copyright (C) 2019 Franco Masotti <franco.masotti@live.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

archiving:
    archive_documents_simple.sh:
        enabled: false
        purpose: >
            I use this script to archive important documents on USB 
            flash drives just in case all the backups fail or files
            are deleted by mistake.
        steps:
            - 1: >
                Partition and format a USB drive
            - 2: > 
                Get the filesystem UUID with `lsblk -o name,uuid`
            - 3: >
                Edit the configuration file
        references:
            - https://wiki.archlinux.org/index.php?title=Udisks&oldid=575618#udevadm_monitor
        programming language: bash
        running user: root
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - GNU Coreutils:
                binaries:
                    - stdbuf
                    - sync
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - util-linux:
                binaries:
                    - mount
                    - umount
                version: 2.34
                homepage: https://github.com/karelzak/util-linux
            - rsync:
                binaries:
                    - rsync
                version: 3.1.3
                homepage: https://rsync.samba.org/
            - systemd:
                binaries:
                    - udevadm
                version: 242.29
                homepage: https://www.github.com/systemd/systemd
        configuration files:
            notes: >
                I use one configuration file per user. 
            paths:
                - archive_documents_simple.myuser.conf
        systemd unit files:
            notes: >
                I use one configuration file per user.
            paths:
                service:
                    - archive-documents-simple.myuser.service
        deploy commands:
            start:
                - systemctl start archive-documents-simple.myuser.service
            enable:
                - systemctl enable archive-documents-simple.myuser.service
        license:
            name: GFDLv1.3+
            homepage: https://www.gnu.org/licenses/fdl-1.3.en.html
    extract_gpx_data_from_dashcams.sh:
        enabled: false
        purpose: >
            I use this script to delete old dashcam footage and replace it with
            gpx data extracted from the footage itself. This works 
            for my "AUKEY DR02 D" dashcam (with its external GPS unit).
            It should work for other dashcams as well.
            You can open the generated gpx files with programs like
            GPXSee or GPX-viewer.
        steps:
            - 1: >
                Put the dashcam footage in the appropriate directory
            - 2: >
                Edit the configuration file
            - 3: >
                Edit the `gpx.fmt` file if needed: THIS STEP IS VERY IMPORTANT.
                Read the comments in the file
        references:
            - https://www.topografix.com/gpx_manual.asp
            - http://owl.phy.queensu.ca/~phil/exiftool/geotag.html#Inverse
            - https://sno.phy.queensu.ca/~phil/exiftool/TagNames/GPS.html
            - https://sno.phy.queensu.ca/~phil/exiftool/faq.html
        programming language: bash
        running user: myuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - Findutils:
                binaries:
                    - find
                    - xargs
                version: 4.6.0
                homepage: https://www.gnu.org/software/findutils/
            - Gawk:
                binaries:
                    - gawk
                version: 4.2.1
                homepage: http://www.gnu.org/software/gawk/
            - GNU Coreutils:
                binaries:
                    - printf
                    - sync
                    - sort
                    - sha1sum
                    - rm
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - exiftool:
                binaries:
                    - exiftool
                version: 11.50
                homepage: http://search.cpan.org/perldoc?exiftool
        configuration files:
            notes: >
                I use one configuration file per dashcam. 
            paths:
                - gpx.fmt
                - extract_gpx_data_from_dashcams.myuser.conf
        systemd unit files:
            notes: >
                I use one configuration file per dashcam.
            paths:
                service:
                    - extract-gpx-data-from-dashcams.myuser.service
                timer:
                    - extract-gpx-data-from-dashcams.myuser.timer
        deploy commands:
            start:
                - systemctl start extract-gpx-data-from-dashcams.myuser.timer
            enable:
                - systemctl enable extract-gpx-data-from-dashcams.myuser.timer
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
    pdftoocr.sh:
        enabled: false
        purpose: >
            I use this script to transform paper documents in ocr'd PDFs.
            This script will process one file per directory.
            The output filename will be the SHA 1 sum of the directory name.

            For example, given:

            `documents/a/out.pdf`

            three files will result:

            `documents/a/86f7e437faa5a7fce15d1ddcb9eaeaea377667b8.pdf` (the compressed, archivable, grayscaled and OCR'd version of `out.pdf`)
            `documents/a/86f7e437faa5a7fce15d1ddcb9eaeaea377667b8.pdf.txt` (a txt file of the OCR'd text from `out.pdf`)
            `documents/a/SHA512SUMS` (A checksum file containing the SHA 512 checksums of `documents/a/86f7e437faa5a7fce15d1ddcb9eaeaea377667b8.pdf`
                                      and `documents/a/86f7e437faa5a7fce15d1ddcb9eaeaea377667b8.pdf.txt`)

            Infact `echo -n 'a' | sha1sum` is `86f7e437faa5a7fce15d1ddcb9eaeaea377667b8`.
        steps:
            - 1: >
                Install the appripriate tesseract language data files
            - 2: >
                Install the JBIG2 Encoder (https://github.com/agl/jbig2enc)
            - 3: >
                Edit the configuration files
            - 3: >
                Scan documents with `simple-scan`
            - 4: >
                Save the output file as ${OUTPUT_FILE}
            - 5: >
                If you want to keep colors, run `touch "${COLOR_OVERRIDE_FILE}"` in
                the directory. This file will be automatically deleted once the
                script ends.
        references:
            - https://unix.stackexchange.com/a/93971
        programming language: bash
        running user: myuse
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - Findutils:
                binaries:
                    - find
                version: 4.6.0
                homepage: https://www.gnu.org/software/findutils/
            - Gawk:
                binaries:
                    - gawk
                version: 4.2.1
                homepage: http://www.gnu.org/software/gawk/
            - GNU Coreutils:
                binaries:
                    - printf
                    - sync
                    - sort
                    - sha1sum
                    - sha512sum
                    - tr
                    - chmod
                    - date
                    - cp
                    - rm
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - Ghostscript:
                binaries:
                    - gs
                version: 9.27
                homepage: https://www.ghostscript.com/
            - OCRmyPDF:
                binaries:
                    - ocrmypdf
                version: 8.3.0
                homepage: https://github.com/jbarlow83/OCRmyPDF
        configuration files:
            notes: >
                It is very important to set the OCR_LANG variable. 
            paths:
                - pdftoocr_deploy.sh
                - pdftoocr_deploy.myuser_documents.conf
                - pdftoocr.myuser_documents.conf
        systemd unit files:
            notes: >
                I use one unit file per document root.
            paths:
                service:
                    - pdftoocr.myuser-documents.service
                timer:
                    - pdftoocr.myuser-documents.timer
        deploy commands:
            start:
                - systemctl start pdftoocr.myuser-documents.timer
            enable:
                - systemctl enable pdftoocr.myuser-documents.timer
        license:
            name: CC-BY-SA 3.0
            homepage: https://creativecommons.org/licenses/by-sa/3.0/
    youtube_dl.sh:
        enabled: false
        purpose: >
            I use this script to download and archive videos from various platforms.
        steps:
            - 1: >
                Get a list of urls and divide them by subject
            - 2: >
                Edit the configuration files
            - 3: >
                Optionally install Gotify and run an instance
        references:
            - https://wiki.archlinux.org/index.php/Youtube-dl
            - https://gotify.net/
            - https://gotify.net/docs/pushmsg
        programming language: bash
        running user: myuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.11(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - GNU Coreutils:
                binaries:
                    - mkdir
                    - printf
                    - wc
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - Findutils:
                binaries:
                    - find
                version: 4.7.0
                homepage: https://www.gnu.org/software/findutils/
            - youtube-dl:
                binaries:
                    - youtube-dl
                version: 2019.10.22
                homepage: https://ytdl-org.github.io/youtube-dl/
            - FFmpeg:
                binaries:
                version: 1:4.2.1
                homepage: https://ffmpeg.org/
            - aria2:
                binaries:
                version: 1.34.0
                homepage: http://aria2.sourceforge.net/
            - Gawk:
                binaries:
                    - gawk
                version: 5.0.1
                homepage: http://www.gnu.org/software/gawk/
            - curl
                binaries:
                    - curl
                version: 7.66.0
                homepage: https://curl.haxx.se
        configuration files:
            notes: >
                Three files must exist for each subject. The `*.conf` file
                is a generic configuration file, the `*.options` file contains
                most of the options used by `youtube-dl` and the `*txt` file
                contains a list of source URLs.
            paths:
                - youtube_dl.some_subject.conf
                - youtube_dl.some_subject.options
                - youtube_dl.some_subject.txt
        systemd unit files:
            notes: >
                I use one configuration file per subject.
            paths:
                service:
                    - youtube-dl.some-subject.service
                timer:
                    - youtube-dl.some-subject.timer
        deploy commands:
            start:
                - systemctl start youtube-dl.some-subject.timer
            enable:
                - systemctl enable youtube-dl.some-subject.timer
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
drives:
    smartd_test.py:
        enabled: false
        purpose: >
            I use this to run periodical S.M.A.R.T. tests on the hard drives.
        steps:
            - 1: >
                Run `hdparm -I ${drive}` and compare the results with
                `ls /dev/disk/by-id` to know which drive corresponds to the
                one you want to work on
            - 2: >
                Edit the configuration file
            - 3: >
                Optionally install Gotify and run an instance
        programming language: python3
        running user: root
        dependencies:
            - Python:
                binaries:
                    - python3
                version:  3.7.4
                homepage: http://www.python.org/
            - Smartmontools:
                binaries:
                    - smartctl
                version: 7.0
                homepage: http://smartmontools.sourceforge.net
            - Requests
                binaries:
                version: 2.22.0
                homepage: http://python-requests.org
        configuration files:
            notes: >
                The script supports only `/dev/disk/by-id` names. See also
                the udev rule file `/lib/udev/rules.d/60-persistent-storage.rules`.
            paths:
                - smartd_test.conf
        systemd unit files:
            notes: >
                I use one file per drive so I can control when a certain drive
                performs testing, instead of running them all at once.
            paths:
                service:
                    - smartd-test.ata-disk1.service
                timer:
                    - smartd-test.ata-disk1.timer
        deploy commands:
            start:
                - systemctl start smartd-test.ata-disk1.timer
            enable:
                - systemctl enable smartd-test.ata-disk1.timer
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
    mdamd_check.py:
        enabled: false
        purpose: >
            I use this to run periodical RAID data scrubs on the hard drives.
        steps:
            - 1: >
                Run `lsblk` to know the names of the mdadm devices. See also
                `cat /proc/mdstat`
            - 2: >
                Edit the configuration file
            - 3: >
                Optionally install Gotify and run an instance
        references:
            - https://frnmst.gitlab.io/notes/raid-data-scrubbing.html
        programming language: python3
        running user: root
        dependencies:
            - Python:
                binaries:
                    - python3
                version:  3.7.3
                homepage: http://www.python.org/
            - Requests
                binaries:
                version: 2.22.0
                homepage: http://python-requests.org
        configuration files:
            paths:
                - mdadm_check.conf
        systemd unit files:
            paths:
                service:
                    - mdamd-check.service
                timer:
                    - mdamd-check.timer
        deploy commands:
            start:
                - systemctl start mdamd-check.timer
            enable:
                - systemctl enable mdamd-check.timer
        license:
            name: GPLv2+
            homepage: https://www.gnu.org/licenses/gpl-2.0.html
desktop:
    random_wallpaper.sh:
        enabled: false
        purpose: >
            I use this to automatically change wallpaper every few minutes.
        steps:
            - 1: >
                Edit the configuration file with image URLs or paths
        references:
            - https://linuxdifficile.wordpress.com/2014/04/24/sfondo-desktop-dinamico-per-linux/
        programming language: bash
        running user: mydesktopuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version:  5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - GNU Coreutils:
                binaries:
                    - shuf
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - feh:
                binaries:
                    - feh
                version: 3.2
                homepage: https://feh.finalrewind.org/
        configuration files:
            notes: >
                Only 1 URL or path is allowed per line. feh will raise an error
                if an empty line is parsed.
            paths:
                - random_wallpaper.conf
        systemd unit files:
            paths:
                service:
                    - random-wallpaper.service
                timer:
                    - random-wallpaper.timer
        deploy commands:
            start:
                - systemctl start random-wallpaper.timer
            enable:
                - systemctl enable random-wallpaper.timer
        license:
            name: CC-BY-SA 2.5
            homepage: http://creativecommons.org/licenses/by-sa/2.5/
    set_display_gamma.sh:
        enabled: false
        purpose: >
            I use this to automatically set a better gamma for the output on a tv.
        steps:
            - 1: >
                Edit the configuration file
        references:
            - https://askubuntu.com/a/62270
        programming language: bash
        running user: mydesktopuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version:  5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - Xorg:
                binaries:
                    - xrandr
                version: 1.5.0
                homepage: https://xorg.freedesktop.org/
        configuration files:
            notes: >
                Make sure that the XORG_DISPLAY variable is set correctly.
                To find out the current display variable run `echo ${DISPLAY}`.
            paths:
                - set_display_gamma.TV_HDMI1.conf
        systemd unit files:
            paths:
                service:
                    - set-display-gamma.service
                timer:
                    - set-display-gamma.timer
        deploy commands:
            start:
                - systemctl start set-display-gamma.timer
            enable:
                - systemctl enable set-display-gamma.timer
        license:
            name: CC-BY-SA 3.0
            homepage: https://creativecommons.org/licenses/by-sa/3.0/
misc:
    vdirsyncer:
        enabled: false
        purpose: >
            I use this to automatically syncronize my calendars and contacts.
        steps:
            - 1: >
                Setup vdirsyncer and you clients (in my case, khal and todoman)
        references:
            - http://vdirsyncer.pimutils.org/en/stable/tutorials/systemd-timer.html
        programming language: bash
        running user: myuser
        dependencies:
            - Vdirsyncer:
                binaries:
                    - vdirsyncer
                version: 0.16.7
                homepage: https://vdirsyncer.pimutils.org/en/stable/
        systemd unit files:
            paths:
                service:
                    - vdirsyncer.service
                timer:
                    - vdirsyncer.timer
        deploy commands:
            start:
                - systemctl start vdirsyncer.timer
            enable:
                - systemctl enable vdirsyncer.timer
        license:
            name: BSD
            homepage: https://opensource.org/licenses/BSD-3-Clause
    monitor_and_notify_git_repo_changes.sh:
        enabled: false
        purpose: >
            My Gitea instance is configured to mirror
            some repositories. Every 30 minutes this script checks for new
            commits in those bare git repositories. If something new
            is commited a notification is sent to my Gotify instance.
            This script also works for non-bare git repositories
        steps:
            - 1: >
                Install Gotify and run an instance
            - 2: >
                Edit the configuration file
        references:
            - https://gitea.io/en-us/
            - https://gotify.net/
            - https://gotify.net/docs/pushmsg
        programming language: bash
        running user: myuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - GNU Coreutils:
                binaries:
                    - printf
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - curl
                binaries:
                    - curl
                version: 7.66.0
                homepage: https://curl.haxx.se
            - Git
                binaries:
                    - git
                version: 2.23.0
                homepage: https://git-scm.com/
        configuration files:
            notes: >
                To avoid missing or reading duplicate messages, the variable
                CHECK_TIMEOUT_INTERVAL_SECONDS should be set
                to the same value as the one in the systemd timer unit
                file (OnCalendar). I use one configuration file
                per group of repositories.
            paths:
                - monitor_and_notify_git_repo_changes.myrepos.conf
        systemd unit files:
            notes: >
                I use one configuration file per group of repositories.
            paths:
                service:
                    - monitor-and-notify-git-repo-changes.myrepos.service
                timer:
                    - monitor-and-notify-git-repo-changes.myrepos.timer
        deploy commands:
            start:
                - systemctl start monitor-and-notify-git-repo-changes.myrepos.timer
            enable:
                - systemctl enable monitor-and-notify-git-repo-changes.myrepos.timer
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
    yacy:
        enabled: false
        purpose: >
            A personal search engine.
        steps:
            - 1: >
                Setup YaCy
            - 2: >
                Create a `yacy` user and group
        references:
            - https://yacy.net/index.html
            - https://github.com/yacy/yacy_search_server
        programming language: java
        running user: yacy
        dependencies:
            - YaCy:
                binaries:
                    - startYACY.sh
                    - stopYACY.sh
                version:
                homepage: https://github.com/yacy/yacy_search_server
        systemd unit files:
            paths:
                service:
                    - yacy-search-server.service
        deploy commands:
            start:
                - systemctl start yacy-search-server.service
            enable:
                - systemctl enable yacy-search-server.service
        license:
            name: LGPLv2+
            homepage: https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html
system:
    hblock_unbound.sh:
        enabled: false
        purpose: >
            I use this script to block malicious domains at a DNS level for the
            whole internal network.
        steps:
            - 1: >
                Setup unbound. Separate the configuration into a header and footer file. Have a look at the provided configuration files
            - 2: >
                Clone the hblock repository: `git clone https://github.com/hectorm/hblock.git`
            - 3: >
                Edit the configuration files
        references:
            - https://github.com/hectorm/hblock
        programming language: bash
        running user: root
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - Unbound:
                binaries:
                    - unbound
                version: 1.9.2
                homepage: https://unbound.net/
            - Git:
                binaries:
                    - git
                version: 2.22.0
                homepage: https://git-scm.com/
            - hblock:
                binaries:
                    - hblock
                version: 2.0.11
                homepage: https://github.com/hectorm/hblock
            - GNU Make:
                binaries:
                    - make
                version: 4.2.1
                homepage: http://www.gnu.org/software/make
        configuration files:
            notes: >
                In case something goes wrong you can use this fallback command:
                `cat hblock_unbound.header.conf hblock_unbound.footer.conf > /etc/unbound/unbound.conf`.
                Please note that the provided configuration files are designed to work
                along with dnscrypt-proxy 2 (https://github.com/jedisct1/dnscrypt-proxy)
            paths:
                - hblock_unbound.footer.conf
                - hblock_unbound.header.conf
                - hblock_unbound.post_commands.conf
        systemd unit files:
            paths:
                service:
                    - hblock-unbound.service
                timer:
                    - hblock-unbound.timer
        deploy commands:
            start:
                - systemctl start hblock-unbound.timer
            enable:
                - systemctl enable hblock-unbound.timer
        license:
            name: MIT
            homepage: https://opensource.org/licenses/MIT
audio:
    set-turntable-loopback-sound:
        enabled: false
        purpose: >
            I use this script to enable the loopback sound of a
            SONY PS-LX300USB turntable.
        steps:
            - 1: >
                Connect the turntable via USB 2.0 type B to the computer
        programming language: bash
        running user: mydesktopuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - alsa-utils:
                binaries:
                    - arecord
                    - aplay
                version: 1.1.9
                homepage: http://www.alsa-project.org
        configuration files:
            notes: >
                To avoid `aplay` bloking the output, configure ALSA with
                dmix PCMs. Use `aplay -l` to find the device names.
                In my case I also want to duplicate the analog and HDMI output;
                there is however a slight delay of the HDMI audio.
            paths:
                - set-turntable-loopback-sound.asoundrc
        systemd unit files:
            paths:
                service:
                    - set-turntable-loopback-sound.service
        deploy commands:
            start:
                - set-turntable-loopback-sound.service
            enable:
                - set-turntable-loopback-sound.service
        license:
            name: CC-BY-SA 3.0
            homepage: https://creativecommons.org/licenses/by-sa/3.0/
