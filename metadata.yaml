#
# Copyright (C) 2019 Franco Masotti <franco.masotti@live.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

archiving:
    archive_documents_simple.sh:
        enabled: false
        purpose: >
            I use this script to archive important documents on USB 
            flash drives just in case all the backups fail or files
            are deleted by mistake.
        steps:
            - 1: >
                Partition and format a USB drive
            - 2: > 
                Get the filesystem UUID with `lsblk -o name,uuid`
            - 3: >
                Edit the configuration file accordingly
            - 4: >
                Deploy
        references:
            - https://wiki.archlinux.org/index.php?title=Udisks&oldid=575618#udevadm_monitor
        programming language: bash
        running user: root
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version:  5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - GNU Coreutils:
                binaries:
                    - stdbuf
                    - sync
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - util-linux:
                binaries:
                    - mount
                    - umount
                version: 2.34
                homepage: https://github.com/karelzak/util-linux
            - rsync:
                binaries:
                    - rsync
                version: 3.1.3
                homepage: https://rsync.samba.org/
            - systemd:
                binaries:
                    - udevadm
                version: 242.29
                homepage: https://www.github.com/systemd/systemd
        configuration files:
            notes: >
                I use one configuration file per user. 
            paths:
                - archive_documents_simple.myuser.conf
        systemd unit files:
            notes: >
                I use one configuration file per user.
            paths:
                service:
                    - archive-documents-simple.myuser.service
        deploy commands:
            start:
                - systemctl start archive-documents-simple.myuser.service
            enable:
                - systemctl enable archive-documents-simple.myuser.service
        license:
            name: GFDLv1.3+
            homepage: https://www.gnu.org/licenses/fdl-1.3.en.html
    extract_gpx_data_from_dashcams.sh:
        enabled: false
        purpose: >
            I use this script to delete old dashcam footage and replace it with
            gpx data extracted from the footage itself. This works 
            for my "AUKEY DR02 D" dashcam (with its external GPS unit).
            It should work for other dashcams as well.
            You can open the generated gpx files with programs like
            GPXSee or GPX-viewer.
        steps:
            - 1: >
                Put the dashcam footage in the appropriate directory
            - 2: >
                Edit the configuration file accordingly
            - 3: >
                Edit the `gpx.fmt` file if needed: THIS STEP IS VERY IMPORTANT.
                Read the comments in the file.
            - 4: >
                Deploy
        references:
            - https://www.topografix.com/gpx_manual.asp
            - http://owl.phy.queensu.ca/~phil/exiftool/geotag.html#Inverse
            - https://sno.phy.queensu.ca/~phil/exiftool/TagNames/GPS.html
            - https://sno.phy.queensu.ca/~phil/exiftool/faq.html
        programming language: bash
        running user: photo
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - Findutils:
                binaries:
                    - find
                    - xargs
                version: 4.6.0
                homepage: https://www.gnu.org/software/findutils/
            - Gawk:
                binaries:
                    - gawk
                version: 4.2.1
                homepage: http://www.gnu.org/software/gawk/
            - GNU Coreutils:
                binaries:
                    - printf
                    - sync
                    - sort
                    - sha1sum
                    - rm
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - exiftool:
                binaries:
                    - exiftool
                version: 11.50
                homepage: http://search.cpan.org/perldoc?exiftool
        configuration files:
            notes: >
                I use one configuration file per dashcam. 
            paths:
                - gpx.fmt
                - extract_gpx_data_from_dashcams.mycar.conf
        systemd unit files:
            notes: >
                I use one configuration file per dashcam.
            paths:
                service:
                    - extract-gpx-data-from-dashcams.mycar.service
                timer:
                    - extract-gpx-data-from-dashcams.mycar.timer
        deploy commands:
            start:
                - systemctl start extract-gpx-data-from-dashcams.mycar.timer
            enable:
                - systemctl enable extract-gpx-data-from-dashcams.mycar.timer
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
drives:
    smartd_test.py:
        enabled: false
        purpose: >
            I use this to run periodical S.M.A.R.T. tests on the hard drives.
        steps:
            - 1: >
                Run `hdparm -I ${drive}` and compare the results with
                `ls /dev/disk/by-id` to know which drive corresponds to the
                one you want to work on
            - 2: >
                Edit the configuration file accordingly
            - 3: >
                Deploy
        programming language: python3
        running user: root
        dependencies:
            - Python:
                binaries:
                    - python3
                version:  3.7.3
                homepage: http://www.python.org/
            - Smartmontools:
                binaries:
                    - smartctl
                version: 7.0
                homepage: http://smartmontools.sourceforge.net
        configuration files:
            notes: >
                The script supports only `/dev/disk/by-id` names. See also
                the udev rule file `/lib/udev/rules.d/60-persistent-storage.rules`.
            paths:
                - smartd_test.conf
        systemd unit files:
            notes: >
                I use one file per drive so I can control when a certain drive
                performs testing, instead of running them all at once.
            paths:
                service:
                    - smartd-test.ata-disk1.service
                timer:
                    - smartd-test.ata-disk1.timer
        deploy commands:
            start:
                - systemctl start smartd-test.ata-disk1.timer
            enable:
                - systemctl enable smartd-test.ata-disk1.timer
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
    mdamd_check.py:
        enabled: false
        purpose: >
            I use this to run periodical RAID data scrubs on the hard drives.
        steps:
            - 1: >
                Run `lsblk` to know the names of the mdadm devices. See also
                `cat /proc/mdstat`
            - 2: >
                Edit the configuration file accordingly
            - 3: >
                Deploy
        references:
            - https://frnmst.gitlab.io/notes/raid-data-scrubbing.html
        programming language: python3
        running user: root
        dependencies:
            - Python:
                binaries:
                    - python3
                version:  3.7.3
                homepage: http://www.python.org/
        configuration files:
            paths:
                - mdadm_check.conf
        systemd unit files:
            paths:
                service:
                    - mdamd-check.service
                timer:
                    - mdamd-check.timer
        deploy commands:
            start:
                - systemctl start mdamd-check.timer
            enable:
                - systemctl enable mdamd-check.timer
        license:
            name: GPLv2+
            homepage: https://www.gnu.org/licenses/gpl-2.0.html
desktop:
    random_wallpaper.sh:
        enabled: false
        purpose: >
            I use this to automatically change wallpaper every few minutes.
        steps:
            - 1: >
                Edit the configuration file with image URLs or paths
            - 2: >
                Deploy
        references:
            - https://linuxdifficile.wordpress.com/2014/04/24/sfondo-desktop-dinamico-per-linux/
        programming language: bash
        running user: mydesktopuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version:  5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - GNU Coreutils:
                binaries:
                    - shuf
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - feh:
                binaries:
                    - feh
                version: 3.2
                homepage: https://feh.finalrewind.org/
        configuration files:
            notes: >
                Only 1 URL or path is allowed per line. feh will raise an error
                if an empty line is parsed.
            paths:
                - random_wallpaper.conf
        systemd unit files:
            paths:
                service:
                    - random-wallpaper.service
                timer:
                    - random-wallpaper.timer
        deploy commands:
            start:
                - systemctl start random-wallpaper.timer
            enable:
                - systemctl enable random-wallpaper.timer
        license:
            name: CC-BY-SA 2.5
            homepage: http://creativecommons.org/licenses/by-sa/2.5/
misc:
    vdirsyncer:
        enabled: false
        purpose: >
            I use this to automatically syncronize calendars and contacts.
        steps:
            - 1: >
                Setup vdirsyncer and you clients (in my case, khal and todoman)
            - 2: >
                Deploy
        references:
            - http://vdirsyncer.pimutils.org/en/stable/tutorials/systemd-timer.html
        programming language: bash
        running user: myuser
        dependencies:
            - Vdirsyncer:
                binaries:
                    - vdirsyncer
                version: 0.16.7
                homepage: https://vdirsyncer.pimutils.org/en/stable/
        systemd unit files:
            paths:
                service:
                    - vdirsyncer.service
                timer:
                    - vdirsyncer.timer
        deploy commands:
            start:
                - systemctl start vdirsyncer.timer
            enable:
                - systemctl enable vdirsyncer.timer
        license:
            name: BSD
            homepage: https://opensource.org/licenses/BSD-3-Clause
