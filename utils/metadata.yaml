#
# Copyright (C) 2019 Franco Masotti <franco.masotti@live.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

archiving:
    archive_invoice_files.py:
        enabled: false
        purpose: >
            I use this script to archive and print invoice files. Invoice 
            files are downloaded from PEC (certified email) accounts as attachments. 
            An HTML file corresponding to the XML invoice file is archived and 
            printed and a notification is sent to a gotify instance. 
            During this process, cryptographical signatures and integrity checks 
            are performed.
        steps:
            - 1: >
                Create a new virtual environment as explained in this post
                https://gitlab.com/frnmst/frnmst.gitlab.io/blob/master/_posts/2019-11-10-running-python-scripts-with-different-package-versions.md,
                and call it `archive_invoice_files`
            - 2: >
                Within the virtual environment Install the listed python 
                dependencies with pip3.
            - 3: >
                Edit the configuration file
        references:
            - https://github.com/markuz/scripts/blob/master/getmail.py
        programming language: python
        running user: myuser
        dependencies:
            - Python:
                binaries:
                    - python3
                version:  3.7.4
                homepage: http://www.python.org/
            - Requests:
                version: 2.22.0
                homepage: http://python-requests.org
            - dateutil:
                version: 2.8.1
                homepage: https://github.com/dateutil/dateutil
            - lxml:
                version: 4.4.1
                homepage: https://lxml.de/
            - pycups:
                version: 1.9.74
                homepage: http://cyberelk.net/tim/software/pycups/
            - WeasyPrint:
                version: 50
                homepage: http://weasyprint.org/
            - fattura-elettronica-reader:
                version: 0.1.0
                homepage: https://github.com/frnmst/fattura-elettronica-reader/
        configuration files:
            notes: >
                I use one configuration file per user.
            paths:
                - archive_invoice_files.myuser.conf
        systemd unit files:
            notes: >
                I use one configuration file per user.
            paths:
                service:
                    - archive-invoice-files.myuser.service
                timer:
                    - archive-invoice-files.myuser.timer
        deploy commands:
            start:
                - systemctl start archive-invoice-files.myuser.timer
            enable:
                - systemctl enable archive-invoice-files.myuser.timer
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
    archive_media_files.sh:
        enabled: false
        purpose: >
            I use this script to archive media files, specifically photos and
            videos, from removable drives (for example SD cards).
            Files are archived using this schema: `${device_uuid}/${year}/${month}`.
            Udisks2 hangs frequently, so I had to write this new script which
            uses traditional mount commands. Parallelization was also added.
        steps:
            - 1: >
                Get a device with media files
            - 2: > 
                Get the filesystem UUID with `lsblk -o name,uuid`
            - 3: >
                Get the user id and group id of the user corresponding to the
                path where the files will be archived
            - 4: >
                Edit the configuration file
        references:
            - https://wiki.archlinux.org/index.php?title=Udisks&oldid=575618#udevadm_monitor
            - https://github.com/frnmst/automated-tasks/blob/67415cdd7224ff21a2f39bb8180ee36cf6e6e31e/archiving/archive_documents_simple.sh
            - https://frnmst.gitlab.io/notes/automatic-removable-media-synchronization.html
        programming language: bash
        running user: root
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.011()
                homepage: http://www.gnu.org/software/bash/bash.html
            - GNU Coreutils:
                binaries:
                    - basename
                    - cut
                    - date
                    - mkdir
                    - rm
                    - stat
                    - stdbuf
                    - sync
                    - wc
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - util-linux:
                binaries:
                    - mount
                    - umount
                version: 2.34
                homepage: https://github.com/karelzak/util-linux
            - rsync:
                binaries:
                    - rsync
                version: 3.1.3
                homepage: https://rsync.samba.org/
            - systemd:
                binaries:
                    - udevadm
                version: 243.78
                homepage: https://www.github.com/systemd/systemd
            - GNU Parallel:
                binaries:
                    - parallel
                version: 20190722
                homepage: https://www.gnu.org/software/parallel/
            - Findutils:
                binaries:
                    - find
                version: 4.7.0
                homepage: https://www.gnu.org/software/findutils/
            - exiftool:
                binaries:
                    - exiftool
                version: 11.70
                homepage: https://search.cpan.org/perldoc?exiftool
            - GNU C Library:
                binaries:
                    - getent
                version: 2.30
                homepage: https://www.gnu.org/software/libc
            - curl:
                binaries:
                    - curl
                version: 7.67.0
                homepage: https://curl.haxx.se
            - Gawk:
                binaries:
                    - gawk
                version: 5.0.1
                homepage: http://www.gnu.org/software/gawk/
            - sudo:
                binaries:
                    - sudo
                version: 1.8.29
                homepage: https://www.sudo.ws/sudo/
        configuration files:
            notes: >
                I use one configuration file per purpose. 
            paths:
                - archive_media_files.mypurpose.conf
        systemd unit files:
            notes: >
                I use one configuration file per purpose.
            paths:
                service:
                    - archive-media-files.mypurpose.service
        deploy commands:
            start:
                - systemctl start archive-media-files.mypurpose.service
            enable:
                - systemctl enable archive-media-files.mypurpose.service
        license:
            name: GFDLv1.3+
            homepage: https://www.gnu.org/licenses/fdl-1.3.en.html
drives:
    smartd_test.py:
        enabled: false
        purpose: >
            I use this to run periodical S.M.A.R.T. tests on the hard drives.
        steps:
            - 1: >
                Run `hdparm -I ${drive}` and compare the results with
                `ls /dev/disk/by-id` to know which drive corresponds to the
                one you want to work on
            - 2: >
                Edit the configuration file
            - 3: >
                Optionally install Gotify and run an instance
        programming language: python3
        running user: root
        dependencies:
            - Python:
                binaries:
                    - python3
                version:  3.7.4
                homepage: http://www.python.org/
            - Smartmontools:
                binaries:
                    - smartctl
                version: 7.0
                homepage: http://smartmontools.sourceforge.net
            - Requests:
                version: 2.22.0
                homepage: http://python-requests.org
        configuration files:
            notes: >
                The script supports only `/dev/disk/by-id` names. See also
                the udev rule file `/lib/udev/rules.d/60-persistent-storage.rules`.
            paths:
                - smartd_test.conf
        systemd unit files:
            notes: >
                I use one file per drive so I can control when a certain drive
                performs testing, instead of running them all at once.
            paths:
                service:
                    - smartd-test.ata-disk1.service
                timer:
                    - smartd-test.ata-disk1.timer
        deploy commands:
            start:
                - systemctl start smartd-test.ata-disk1.timer
            enable:
                - systemctl enable smartd-test.ata-disk1.timer
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
    mdamd_check.py:
        enabled: false
        purpose: >
            I use this to run periodical RAID data scrubs on the hard drives.
        steps:
            - 1: >
                Run `lsblk` to know the names of the mdadm devices. See also
                `cat /proc/mdstat`
            - 2: >
                Edit the configuration file
            - 3: >
                Optionally install Gotify and run an instance
        references:
            - https://frnmst.gitlab.io/notes/raid-data-scrubbing.html
        programming language: python3
        running user: root
        dependencies:
            - Python:
                binaries:
                    - python3
                version:  3.7.3
                homepage: http://www.python.org/
            - Requests:
                version: 2.22.0
                homepage: http://python-requests.org
        configuration files:
            paths:
                - mdadm_check.conf
        systemd unit files:
            paths:
                service:
                    - mdamd-check.service
                timer:
                    - mdamd-check.timer
        deploy commands:
            start:
                - systemctl start mdamd-check.timer
            enable:
                - systemctl enable mdamd-check.timer
        license:
            name: GPLv2+
            homepage: https://www.gnu.org/licenses/gpl-2.0.html
    xfs_defrag.py:
        enabled: false
        purpose: >
            I use this script to run periodic defragmentations on XFS filesystem.
        steps:
            - 1: >
                Run `lsblk -o name,uuid` and get the uuid of the partition you want
                to defragment
            - 2: >
                Edit the configuration file
            - 3: >
                Optionally install Gotify and run an instance
        references:
            - https://brashear.me/blog/2017/07/30/adventures-in-xfs-defragmentation/
        programming language: python3
        running user: root
        dependencies:
            - Python:
                binaries:
                    - python3
                version:  3.8.0
                homepage: http://www.python.org/
            - util-linux:
                binaries:
                    - lsblk
                version: 2.34
                homepage: https://github.com/karelzak/util-linux
            - Requests:
                version: 2.22.0
                homepage: http://python-requests.org
        configuration files:
            notes: >
                The script supports only `/dev/disk/by-uuid` names.
            paths:
                - xfs_defrag.conf
        systemd unit files:
            paths:
                service:
                    - xfs-defrag.my-uuid.service
                timer:
                    - xfs-defrag.my-uuid.timer
        deploy commands:
            start:
                - systemctl start xfs-defrag.my-uuid.timer
            enable:
                - systemctl enable xfs-defrag.my-uuid.timer
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
desktop:
    random_wallpaper.sh:
        enabled: false
        purpose: >
            I use this to automatically change wallpaper every few minutes.
        steps:
            - 1: >
                Edit the configuration file with image URLs or paths
        references:
            - https://linuxdifficile.wordpress.com/2014/04/24/sfondo-desktop-dinamico-per-linux/
        programming language: bash
        running user: mydesktopuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version:  5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - GNU Coreutils:
                binaries:
                    - shuf
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - feh:
                binaries:
                    - feh
                version: 3.2
                homepage: https://feh.finalrewind.org/
        configuration files:
            notes: >
                Only 1 URL or path is allowed per line. feh will raise an error
                if an empty line is parsed.
            paths:
                - random_wallpaper.conf
        systemd unit files:
            paths:
                service:
                    - random-wallpaper.service
                timer:
                    - random-wallpaper.timer
        deploy commands:
            start:
                - systemctl start random-wallpaper.timer
            enable:
                - systemctl enable random-wallpaper.timer
        license:
            name: CC-BY-SA 2.5
            homepage: http://creativecommons.org/licenses/by-sa/2.5/
    set_display_gamma.sh:
        enabled: false
        purpose: >
            I use this to automatically set a better gamma for the output on a tv.
        steps:
            - 1: >
                Edit the configuration file
        references:
            - https://askubuntu.com/a/62270
        programming language: bash
        running user: mydesktopuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version:  5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - Xorg:
                binaries:
                    - xrandr
                version: 1.5.0
                homepage: https://xorg.freedesktop.org/
        configuration files:
            notes: >
                Make sure that the XORG_DISPLAY variable is set correctly.
                To find out the current display variable run `echo ${DISPLAY}`.
            paths:
                - set_display_gamma.TV_HDMI1.conf
        systemd unit files:
            paths:
                service:
                    - set-display-gamma.service
                timer:
                    - set-display-gamma.timer
        deploy commands:
            start:
                - systemctl start set-display-gamma.timer
            enable:
                - systemctl enable set-display-gamma.timer
        license:
            name: CC-BY-SA 3.0
            homepage: https://creativecommons.org/licenses/by-sa/3.0/
misc:
    vdirsyncer:
        enabled: false
        purpose: >
            I use this to automatically syncronize my calendars and contacts.
        steps:
            - 1: >
                Setup vdirsyncer and you clients (in my case, khal and todoman)
        references:
            - http://vdirsyncer.pimutils.org/en/stable/tutorials/systemd-timer.html
        programming language: bash
        running user: myuser
        dependencies:
            - Vdirsyncer:
                binaries:
                    - vdirsyncer
                version: 0.16.7
                homepage: https://vdirsyncer.pimutils.org/en/stable/
        systemd unit files:
            paths:
                service:
                    - vdirsyncer.service
                timer:
                    - vdirsyncer.timer
        deploy commands:
            start:
                - systemctl start vdirsyncer.timer
            enable:
                - systemctl enable vdirsyncer.timer
        license:
            name: BSD
            homepage: https://opensource.org/licenses/BSD-3-Clause
    monitor_and_notify_git_repo_changes.sh:
        enabled: false
        purpose: >
            My Gitea instance is configured to mirror
            some repositories. Every 30 minutes this script checks for new
            commits in those bare git repositories. If something new
            is commited a notification is sent to my Gotify instance.
            This script also works for non-bare git repositories
        steps:
            - 1: >
                Install Gotify and run an instance
            - 2: >
                Edit the configuration file
        references:
            - https://gitea.io/en-us/
            - https://gotify.net/
            - https://gotify.net/docs/pushmsg
        programming language: bash
        running user: myuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - GNU Coreutils:
                binaries:
                    - printf
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - curl:
                binaries:
                    - curl
                version: 7.66.0
                homepage: https://curl.haxx.se
            - Git:
                binaries:
                    - git
                version: 2.23.0
                homepage: https://git-scm.com/
        configuration files:
            notes: >
                To avoid missing or reading duplicate messages, the variable
                CHECK_TIMEOUT_INTERVAL_SECONDS should be set
                to the same value as the one in the systemd timer unit
                file (OnCalendar). I use one configuration file
                per group of repositories.
            paths:
                - monitor_and_notify_git_repo_changes.myrepos.conf
        systemd unit files:
            notes: >
                I use one configuration file per group of repositories.
            paths:
                service:
                    - monitor-and-notify-git-repo-changes.myrepos.service
                timer:
                    - monitor-and-notify-git-repo-changes.myrepos.timer
        deploy commands:
            start:
                - systemctl start monitor-and-notify-git-repo-changes.myrepos.timer
            enable:
                - systemctl enable monitor-and-notify-git-repo-changes.myrepos.timer
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
    yacy:
        enabled: false
        purpose: >
            A personal search engine.
        steps:
            - 1: >
                Setup YaCy
            - 2: >
                Create a `yacy` user and group
        references:
            - https://yacy.net/index.html
            - https://github.com/yacy/yacy_search_server
        programming language: java
        running user: yacy
        dependencies:
            - YaCy:
                binaries:
                    - startYACY.sh
                    - stopYACY.sh
                version:
                homepage: https://github.com/yacy/yacy_search_server
        systemd unit files:
            paths:
                service:
                    - yacy-search-server.service
        deploy commands:
            start:
                - systemctl start yacy-search-server.service
            enable:
                - systemctl enable yacy-search-server.service
        license:
            name: LGPLv2+
            homepage: https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html
    notify_camera_action.sh:
        enabled: false
        purpose: >
            Notify when a camera connected to a system running motion is
            found or lost (disconnected).
        steps:
            - 1: >
                Setup Motion
            - 2: >
                Edit the camera's configuration file with:
                ```
                # Run camera actions.
                on_camera_lost /home/jobs/scripts/by-user/motion/notify_camera_action.sh /home/jobs/scripts/by-user/motion/notify_camera_action.conf "%$ (id: %t)" "lost"
                on_camera_found /home/jobs/scripts/by-user/motion/notify_camera_action.sh /home/jobs/scripts/by-user/motion/notify_camera_action.conf "%$ (id: %t)" "found"
                ```
            - 3: >
                Optionally install Gotify and run an instance
        references:
            - https://motion-project.github.io/motion_config.html
        programming language: bash
        running user: motion
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.11(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - GNU Coreutils:
                binaries:
                    - printf
                    - stdbuf
                    - sync
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
            - curl:
                binaries:
                    - curl
                version: 7.67.0
                homepage: https://curl.haxx.se
        configuration files:
            notes: >
                A single file is used for all the cameras connected to a system.
            paths:
                - notify_camera_action.conf
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
system:
    hblock_unbound.sh:
        enabled: false
        purpose: >
            I use this script to block malicious domains at a DNS level for the
            whole internal network.
        steps:
            - 1: >
                Setup unbound. Separate the configuration into a header and footer file. Have a look at the provided configuration files
            - 2: >
                Clone the hblock repository: `git clone https://github.com/hectorm/hblock.git`
            - 3: >
                Edit the configuration files
        references:
            - https://github.com/hectorm/hblock
        programming language: bash
        running user: root
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - Unbound:
                binaries:
                    - unbound
                version: 1.9.2
                homepage: https://unbound.net/
            - Git:
                binaries:
                    - git
                version: 2.22.0
                homepage: https://git-scm.com/
            - hblock:
                binaries:
                    - hblock
                version: 2.0.11
                homepage: https://github.com/hectorm/hblock
            - GNU Make:
                binaries:
                    - make
                version: 4.2.1
                homepage: http://www.gnu.org/software/make
        configuration files:
            notes: >
                In case something goes wrong you can use this fallback command:
                `cat hblock_unbound.header.conf hblock_unbound.footer.conf > /etc/unbound/unbound.conf`.
                Please note that the provided configuration files are designed to work
                along with dnscrypt-proxy 2 (https://github.com/jedisct1/dnscrypt-proxy)
            paths:
                - hblock_unbound.footer.conf
                - hblock_unbound.header.conf
                - hblock_unbound.post_commands.conf
        systemd unit files:
            paths:
                service:
                    - hblock-unbound.service
                timer:
                    - hblock-unbound.timer
        deploy commands:
            start:
                - systemctl start hblock-unbound.timer
            enable:
                - systemctl enable hblock-unbound.timer
        license:
            name: MIT
            homepage: https://opensource.org/licenses/MIT
    clean_pacman.sh:
        enabled: false
        purpose: >
            I use this very simple script to clean the cache generated by Pacman.
        steps:
        references:
            - https://wiki.archlinux.org/index.php/Pacman#Cleaning_the_package_cache
            - https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks#Removing_unused_packages_.28orphans.29
        programming language: bash
        running user: root
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.11(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - pacman-contrib:
                binaries:
                    - paccache
                version: 1.2.0
                homepage: https://git.archlinux.org/pacman-contrib.git/about/
        systemd unit files:
            paths:
                service:
                    - clean-pacman.service
                timer:
                    - clean-pacman.timer
        deploy commands:
            start:
                - systemctl start clean-pacman.timer
            enable:
                - systemctl enable clean-pacman.timer
        license:
            name: GFDLv1.3+
            homepage: https://www.gnu.org/licenses/fdl-1.3.en.html
audio:
    set-turntable-loopback-sound:
        enabled: false
        purpose: >
            I use this script to enable the loopback sound of a
            SONY PS-LX300USB turntable.
        steps:
            - 1: >
                Connect the turntable via USB 2.0 type B to the computer
        programming language: bash
        running user: mydesktopuser
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.7(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - alsa-utils:
                binaries:
                    - arecord
                    - aplay
                version: 1.1.9
                homepage: http://www.alsa-project.org
        configuration files:
            notes: >
                To avoid `aplay` bloking the output, configure ALSA with
                dmix PCMs. Use `aplay -l` to find the device names.
                In my case I also want to duplicate the analog and HDMI output;
                there is however a slight delay of the HDMI audio.
            paths:
                - set-turntable-loopback-sound.asoundrc
        systemd unit files:
            paths:
                service:
                    - set-turntable-loopback-sound.service
        deploy commands:
            start:
                - set-turntable-loopback-sound.service
            enable:
                - set-turntable-loopback-sound.service
        license:
            name: CC-BY-SA 3.0
            homepage: https://creativecommons.org/licenses/by-sa/3.0/
video:
    record_motion:
        enabled: false
        purpose: >
            I use this script to record video streams captured by webcams
            with Motion
        steps:
            - 1: >
                Make sure to have a big enough hard drive
            - 2: >
                Configure motion
        programming language: bash
        running user: surveillance
        dependencies:
            - GNU Bash:
                binaries:
                    - bash
                version: 5.0.11(1)
                homepage: http://www.gnu.org/software/bash/bash.html
            - FFmpeg:
                binaries:
                    - ffmpeg
                version: 1:4.2.1
                homepage: https://ffmpeg.org/
            - Findutils:
                binaries:
                    - find
                version: 4.7.0
                homepage: https://www.gnu.org/software/findutils/
            - GNU Coreutils:
                binaries:
                    - mkdir
                    - rm
                version: 8.31
                homepage: https://www.gnu.org/software/coreutils/
        configuration files:
            paths:
                - record_motion.camera1.conf
        systemd unit files:
            paths:
                service:
                    - record-motion.camera1.service
        deploy commands:
            start:
                - record-motion.camera1.service
            enable:
                - record-motion.camera1.service
        license:
            name: GPLv3+
            homepage: https://www.gnu.org/licenses/gpl-3.0.html
